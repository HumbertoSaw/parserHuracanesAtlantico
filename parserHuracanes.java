/* Generated By:JavaCC: Do not edit this line. parserHuracanes.java */
class parserHuracanes implements parserHuracanesConstants {
        public static void main (String[] args) throws ParseException{
                System.out.println("ocean,numCycl,year,name,numTrcks,yearTrck,monthTrck,dayTrck,hourTrck,minutsTrck,recordId,statusSys,latitude,longitude,maxSustWin,minPress,34ktNE,34ktSE,34ktSW,34ktNW,50ktNE,50ktSE,50ktSW,50ktNW,64ktNE,64ktSE,64ktSW,64ktNW,radMaxWind");
                try {
                        parserHuracanes analizador = new parserHuracanes(System.in);
                        analizador.parser();
                }
                catch(ParseException exception) {
                        System.out.println("ha ocurrido un error");
                        System.out.println(exception.getMessage());
                }
        }

  static final public String identicador() throws ParseException {
        Token id, nombreHuracan;
        String aux, oceano, numCycl, anio, nombre, numEntradas;
        String retorno="";
        String[] divisor;
    id = jj_consume_token(IdHuracan);
                aux = id.image.toString();
                aux = aux.replace(" ","");
                oceano = aux.substring(0,2);
                numCycl = aux.substring(2,4);
                anio = aux.substring(4);
                retorno += oceano + "," + numCycl + "," + anio;
    nombreHuracan = jj_consume_token(NombreHuracan);
                aux = nombreHuracan.image.toString();
                aux = aux.replace(" ","");
                divisor = aux.split(",",2);
                nombre = divisor[0];
                numEntradas = divisor[1];
                retorno += nombre + "," + numEntradas;

                {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public String data() throws ParseException {
        Token fecha, lat, lon, velocidad;
    Token max, min,ktNE34,ktSE34,ktSW34,ktNW34,ktNE50,ktSE50,ktSW50,ktNW50,ktNE64,ktSE64,ktSW64,ktNW64, radMax;
    String tipoVelocidad, recordId, aux, data, anio, mes, dia, hora, minuto, retorno="";
    String[] divisor;
    fecha = jj_consume_token(Fecha);
                aux = fecha.image.toString();
                aux = aux.replace(" ","");
                divisor = aux.split(",",2);
                anio = divisor[0].substring(0,4);
                mes = divisor[0].substring(4,6);
                dia = divisor[0].substring(6,8);

                hora = divisor[1].substring(0,2);
                minuto = divisor[1].substring(2,4)+",";

                retorno += anio + "," + mes + "," + dia + "," + hora + "," + minuto;
    velocidad = jj_consume_token(VelocidadHuracan);
                aux = velocidad.image.toString();
                divisor = aux.split(",",2);
                divisor[0] = divisor[0].replace(" ","");
                divisor[1] = divisor[1].replace(" ","");
                if (divisor[0].isEmpty()) {
                        divisor[0] = "n/a";
                }
                recordId = divisor[0];
                tipoVelocidad = divisor[1];

                retorno += recordId + "," + tipoVelocidad;
    lat = jj_consume_token(Latitud);
                aux = lat.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("S")){
                        aux = aux.replace("S","");
                        aux = "-" + aux;
                }
                aux = aux.replace("N","");
                retorno += aux;
    lon = jj_consume_token(Longitud);
                aux = lon.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("W")){
                        aux = aux.replace("W","");
                        aux = "-" + aux;
                }
                aux = aux.replace("E","");
                retorno += aux;
    max = jj_consume_token(Data);
                aux = max.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    min = jj_consume_token(Data);
                aux = min.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    ktNE34 = jj_consume_token(Data);
                aux = ktNE34.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    ktSE34 = jj_consume_token(Data);
                aux = ktSE34.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    ktSW34 = jj_consume_token(Data);
                aux = ktSW34.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    ktNW34 = jj_consume_token(Data);
                aux = ktNW34.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    ktNE50 = jj_consume_token(Data);
                aux = ktNE50.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    ktSE50 = jj_consume_token(Data);
                aux = ktSE50.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    ktSW50 = jj_consume_token(Data);
                aux = ktSW50.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    ktNW50 = jj_consume_token(Data);
                aux = ktNW50.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    ktNE64 = jj_consume_token(Data);
                aux = ktNE64.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    ktSE64 = jj_consume_token(Data);
                aux = ktSE64.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    ktSW64 = jj_consume_token(Data);
                aux = ktSW64.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    ktNW64 = jj_consume_token(Data);
                aux = ktNW64.image.toString();
                aux = aux.replace(" ","");
                if(aux.contains("-999")){
                        aux = "null,";
                }
                retorno += aux;
    radMax = jj_consume_token(Data);
                aux = radMax.image.toString();
                aux = aux.replace(" ","");
                aux = aux.replace(",","");
                if(aux.contains("-999")){
                        aux = "null";
                }
                retorno += aux;
                {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public void parser() throws ParseException {
    String id, metaData;
    label_1:
    while (true) {
      id = identicador();
      label_2:
      while (true) {
        metaData = data();
                                          System.out.println(id + metaData);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Fecha:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_2;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IdHuracan:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public parserHuracanesTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10,0x2,};
   }

  /** Constructor with InputStream. */
  public parserHuracanes(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public parserHuracanes(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new parserHuracanesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public parserHuracanes(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new parserHuracanesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public parserHuracanes(parserHuracanesTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(parserHuracanesTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
