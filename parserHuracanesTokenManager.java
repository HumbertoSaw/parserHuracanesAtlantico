/* Generated By:JavaCC: Do not edit this line. parserHuracanesTokenManager.java */

/** Token Manager. */
public class parserHuracanesTokenManager implements parserHuracanesConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         return jjStartNfaWithStates_0(0, 7, 95);
      case 44:
         return jjStartNfaWithStates_0(0, 7, 96);
      case 46:
         return jjStartNfaWithStates_0(0, 15, 97);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 95;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff100000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 46)
                     jjCheckNAddStates(4, 7);
                  else if (curChar == 32)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(8, 21);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAddStates(22, 30);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(43, 69);
                  else if (curChar == 44)
                     jjCheckNAddStates(31, 38);
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 95:
                  if ((0x3ff100000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 32)
                  {
                     if (kind > 18)
                        kind = 18;
                     jjCheckNAdd(67);
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(39, 41);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(62, 63);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  else if (curChar == 32)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(39, 41);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(56, 57);
                  else if (curChar == 44)
                     jjCheckNAddStates(31, 38);
                  else if (curChar == 45)
                     jjCheckNAdd(43);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  else if (curChar == 32)
                     jjCheckNAddStates(42, 44);
                  if (curChar == 32)
                     jjCheckNAddStates(45, 47);
                  if (curChar == 32)
                     jjCheckNAddTwoStates(52, 4);
                  if (curChar == 32)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 96:
                  if ((0x3ff100000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 32)
                     jjCheckNAddStates(31, 38);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 2:
                  if (curChar == 44 && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 44)
                     jjCheckNAddStates(31, 38);
                  break;
               case 5:
                  if (curChar == 32)
                     jjCheckNAddStates(31, 38);
                  break;
               case 7:
                  if (curChar == 44 && kind > 3)
                     kind = 3;
                  break;
               case 21:
                  if ((0x3ff100000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 24:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 40:
                  if (curChar != 32)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(8, 21);
                  break;
               case 41:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 45)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if (curChar == 45)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar == 44)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 46:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 50);
                  break;
               case 48:
                  if (curChar != 44)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if (curChar != 32)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 48);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 52:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(52, 4);
                  break;
               case 53:
                  if (curChar == 32)
                     jjCheckNAddStates(45, 47);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 58:
                  if (curChar == 44 && kind > 5)
                     kind = 5;
                  break;
               case 59:
                  if (curChar == 32)
                     jjCheckNAddStates(42, 44);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
                  if (curChar == 44 && kind > 6)
                     kind = 6;
                  break;
               case 65:
                  if (curChar != 32)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(39, 41);
                  break;
               case 66:
                  if (curChar != 45)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(39, 41);
                  break;
               case 67:
                  if (curChar != 32)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(43, 69);
                  break;
               case 69:
                  if (curChar == 45)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if (curChar != 45)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(70);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(22, 30);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if (curChar == 44)
                     jjCheckNAddStates(50, 52);
                  break;
               case 81:
                  if (curChar == 32)
                     jjCheckNAddStates(50, 52);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if (curChar != 44)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(84);
                  break;
               case 84:
                  if (curChar != 32)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(84);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(88);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(89);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 92:
                  if (curChar == 46)
                     jjCheckNAddStates(4, 7);
                  break;
               case 93:
                  if (curChar != 45)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(0, 3);
                  break;
               case 94:
                  if (curChar != 45)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(94);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(43, 69);
                  if ((0x9d1288L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjstateSet[jjnewStateCnt++] = 4;
                  }
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 83)
                     jjCheckNAddTwoStates(37, 38);
                  else if (curChar == 84)
                     jjCheckNAddTwoStates(37, 38);
                  else if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 97:
                  if ((0x800020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  else if ((0x84000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 95:
               case 42:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 96:
                  if (curChar == 83)
                     jjCheckNAddTwoStates(18, 19);
                  else if (curChar == 84)
                     jjCheckNAddTwoStates(18, 19);
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
                  if (curChar == 76)
                     jjAddStates(48, 49);
                  break;
               case 6:
                  if (curChar == 85)
                     jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (curChar == 88)
                     jjCheckNAdd(7);
                  break;
               case 10:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 79)
                     jjCheckNAdd(7);
                  break;
               case 12:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 86)
                     jjCheckNAdd(7);
                  break;
               case 14:
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 66)
                     jjCheckNAdd(7);
                  break;
               case 16:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 84)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if (curChar == 68)
                     jjCheckNAdd(7);
                  break;
               case 19:
                  if (curChar == 83)
                     jjCheckNAdd(7);
                  break;
               case 20:
                  if (curChar == 83)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 26:
                  if (curChar == 85 && kind > 20)
                     kind = 20;
                  break;
               case 27:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 88 && kind > 20)
                     kind = 20;
                  break;
               case 29:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 79 && kind > 20)
                     kind = 20;
                  break;
               case 31:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 86 && kind > 20)
                     kind = 20;
                  break;
               case 33:
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 66 && kind > 20)
                     kind = 20;
                  break;
               case 35:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 84)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 37:
                  if (curChar == 68 && kind > 20)
                     kind = 20;
                  break;
               case 38:
                  if (curChar == 83 && kind > 20)
                     kind = 20;
                  break;
               case 39:
                  if (curChar == 83)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 43:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 57:
                  if ((0x84000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 63:
                  if ((0x800020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 68:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(43, 69);
                  break;
               case 69:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(70);
                  break;
               case 71:
                  if ((0x9d1288L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 95 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   65, 66, 21, 94, 56, 57, 62, 63, 41, 42, 52, 4, 53, 54, 55, 59, 
   60, 61, 65, 66, 21, 67, 73, 54, 55, 60, 61, 85, 88, 89, 90, 5, 
   8, 10, 12, 14, 16, 17, 20, 65, 66, 21, 59, 60, 61, 53, 54, 55, 
   1, 2, 81, 82, 83, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\54", null, "\56", null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x1fffffL, 
};
static final long[] jjtoSkip = {
   0x1e00000L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[95];
static private final int[] jjstateSet = new int[190];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public parserHuracanesTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public parserHuracanesTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 95; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         tokenImage = "";
      else
         tokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      tokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 7;
   jjmatchedPos = -1;
   curPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static int[] jjemptyLineNo = new int[1];
static int[] jjemptyColNo = new int[1];
static boolean[] jjbeenHere = new boolean[1];
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 1 :
         break;
      case 2 :
         break;
      case 3 :
         break;
      case 4 :
         break;
      case 5 :
         break;
      case 6 :
         break;
      case 7 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() && 
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 8 :
         break;
      case 9 :
         break;
      case 10 :
         break;
      case 11 :
         break;
      case 12 :
         break;
      case 13 :
         break;
      case 14 :
         break;
      case 15 :
         break;
      case 16 :
         break;
      case 17 :
         break;
      case 18 :
         break;
      case 19 :
         break;
      case 20 :
         break;
      default : 
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
